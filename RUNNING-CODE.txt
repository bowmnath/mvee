# Recreating performance results

scaling_m_n.py -- save results of scaling runs. Saves data as it goes, so should recover without needing to rerun everything if it gets interrupted. The following are variables that will need to be changed between runs:
* Set appropriate values for ms, ns, and prob_type to recreate desired runs.
* Typically will be run with one of ms or ns as a list containing a single number; otherwise, number of runs grows multiplicatively. There are two options for base_dirname depending on whether m or n is varying; be sure to uncomment the appropriate one.
* The three options for prob_type are already in the file next to one another with two of them commented out.
* You may not want to go as large as the sizes used for the paper because those runs were on a more powerful machine and the timings could take a while on the VM.

display_scaling.py -- plot results of scaling runs. Requires that all data has been generated by scaling_m_n.py first. The only variable that will need to be changed is vary_m, which will either be set to True or False depending which type of run you want to see, the one that varies m or the one that varies n. Will require X-forwarding to make plot display.

# All other plots

All remainging figures from the thesis can be recreated in a straightforward
way using the provided scripts `step{0-8}.sh`.

The first script, `step0.sh`, generates most of the data and is thus somewhat slow.  We suggest running `./step0.sh` and then stepping away for 30 minutes to an hour while it computes its outputs.

The remaining scripts, `step1.sh` through `step8.sh`, generate one figure each.  Simply run, e.g., `./step1.sh` to see Figure 1.  All subplots are included automatically by the scripts, but they will be shown one at a time.

The only script that is a bit slower is `step4.sh`, which does a bit of computing as well as displaying plots.
