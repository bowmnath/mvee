# Recreating information about kurtosis, core set size, and iteration count

change_kurtosis_only.py -- generate core set size vs kurtosis for sinh-arcsinh data. Change method = 'newton' or method = 'todd' depending on which results you want. That is the only change you should need to make. This will take a few minutes (probably 5 - 10) to run.

cond_vs_kurtosis.py -- generate core set size vs kurtosis for various distributions. Change method = 'newton' or method = 'todd' depending on which results you want. That is the only change you should need to make. This will take a few minutes (probably 5 - 10) to run.

thesis_generate_kurtosis -- plot core set size vs kurtosis. Requires data to be generated first by the other scripts. Will require X-forwarding to make plot display. Change varied_data to switch between sinh-arcsinh and the varied distributions. Change do_todd to switch between plotting Newton and coordinate ascent.

change_kurtosis_n.py -- generate core set size vs kurtosis with varying values of n. Also plots results, which will require X-forwarding. Change method variable to change which method is used. Runs fairly quickly (1 - 5 minutes).

perfect_hybrid.py -- generate data for core set size vs iteration (Fig 6). To recreate the data for Fig 6, use mode = 'run_only' and set seeds_to_run = [101550, 91550, 81550, 131550, 141550, 181550, 11550, 151550, 121550, 171550, 161550, 111550] (these values should already be set for you). Running this once will be sufficient to generate all of the data from the figure. This script will take several minutes (approximately 15 - 30) to run.

display_perfect_hybrid.py -- display results of perfect_hybrid.py. To make results look better, when running with CA, uncomment the CA colors and order lines (currently 26 and 27). Will require X-forwarding to make plot display.

# Recreating performance results

scaling_m_n.py -- save results of scaling runs. Saves data as it goes, so should recover without needing to rerun everything if it gets interrupted. The following are variables that will need to be changed between runs:
* Set appropriate values for ms, ns, and prob_type to recreate desired runs.
* Typically will be run with one of ms or ns as a list containing a single number; otherwise, number of runs grows multiplicatively. There are two options for base_dirname depending on whether m or n is varying; be sure to uncomment the appropriate one.
* The three options for prob_type are already in the file next to one another with two of them commented out.
* You may not want to go as large as the sizes used for the paper because those runs were on a more powerful machine and the timings could take a while on the VM.

display_scaling.py -- plot results of scaling runs. Requires that all data has been generated by scaling_m_n.py first. The only variable that will need to be changed is vary_m, which will either be set to True or False depending which type of run you want to see, the one that varies m or the one that varies n. Will require X-forwarding to make plot display.
