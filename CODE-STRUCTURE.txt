This document gives a brief overview of the code itself. For instructions on how to run the code to recreate the tests, please see RUNNING-CODE.txt.

(Note: when we refer to "the document" below, we mean the submitted journal article.)

All of the significant code can be found in mvee.py. The code is already somewhat broken up by topic (and will fold if you use vim and have your settings adjusted for folding).

The null-space matrix as described in the document and the constraints are both represented as classes for convenience. These classes and their methods should be reasonably well documented or easy to understand, at least at the level of an interface.

The Cache class was created due to the expense of fancy indexing in Python. It simply stores several large matrices so that they do not need to be recomputed, only instantiating them as necessary.

The new algorithm described in the document is written in the function mvee2. This function can be used to compute any of the active-set methods described in the document. It defaults to Newton; to use a different method, specify the method as a keyword argument.  Comments are provided to indicate which lines of code line up with which parts of the pseudocode provided in the document.

The coordinate ascent method due to Todd, which is used as a baseline in our comparisons, is implemented in the function mvee. This same coordinate ascent method is used if mvee2 is called with method='todd'. This code is a straightforward port of MATLAB code provided by Michael J. Todd in "Minimum-Volume Enclosing Ellipsoids: Theory and Applications".

Some notes about the code in mvee.py:
* The code contains most of the work we did on this topic, even if that work has not yet been completed or was not written up in the document. This includes primal methods, several unused initializations, a trust-region method, and a CUDA implementation.
* When you see references to 'todd' in the code, these refer to the coordinate ascent algorithm for computing MVEEs. It was initially called that in the code because our source for that algorithm was the work of Michael Todd.
* Much of the code in the mvee2 function is for tracking purposes and does not affect the output. All track_* variables should be set to False (which is the default) when running to compare performance.
* Because we often returned different things from the mvee2 method (including information that helped with profiling and debugging), the method returns a dictionary that may have various different key/value pairs depending on the parameters passed in.
* Rather than continue to add keyword arguments to the mvee2 function, we instead made it accept arbitrary keyword arguments and kept a separate dictionary of default parameters that was compared against anything the user input and updated as necessary. We doubt this is considered best practice, but it was quite convenient.

Note about parameters.py:
The code in parameters.py does not affect the method itself; it was used to decrease the amount of duplication we needed to do in setting parameters for some of our tests. We do not think you will need to change it or use it at all if your only goal is to recreate the results from the document.

Note about the runner code:
* We are reasonably sure we commented out all of these for you, but in case we missed one, the purpose of the interactive_plot variable in some of the runner code was to stop us from accidentally overwriting output files. To overwrite a file, interactive_plot must be False, and there is usually another pair of lines involving interactive_plot that must be commented out or they will print a warning and quit.
